// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using map.backend.shared.Persistence;

#nullable disable

namespace map.backend.shared.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("seq_location_id")
                .StartsAt(0L)
                .HasMin(0L)
                .HasMax(9999L)
                .IsCyclic();

            modelBuilder.Entity("map.backend.shared.Entities.Auth.tb_role_mapping", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("record_stat")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.Property<string>("rolecode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rolecode");

                    b.Property<string>("screencode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("screencode");

                    b.Property<string>("screenorg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("screenorg");

                    b.HasKey("id")
                        .HasName("pk_tb_role_mapping");

                    b.ToTable("tb_role_mapping", (string)null);
                });

            modelBuilder.Entity("map.backend.shared.Entities.Auth.tb_roles", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("record_stat")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.Property<string>("rolecode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rolecode");

                    b.Property<string>("rolename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("rolename");

                    b.HasKey("id")
                        .HasName("pk_tb_roles");

                    b.ToTable("tb_roles", (string)null);
                });

            modelBuilder.Entity("map.backend.shared.Entities.Auth.tb_screens", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("group")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("group");

                    b.Property<string>("icon")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("icon");

                    b.Property<int>("index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("record_stat")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.Property<string>("screencode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("screencode");

                    b.Property<string>("screenname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("screenname");

                    b.Property<string>("screenorg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("screenorg");

                    b.Property<string>("screenurl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("screenurl");

                    b.HasKey("id")
                        .HasName("pk_tb_screens");

                    b.ToTable("tb_screens", (string)null);
                });

            modelBuilder.Entity("map.backend.shared.Entities.Auth.tb_user", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("img")
                        .HasColumnType("text")
                        .HasColumnName("img");

                    b.Property<int>("limit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5)
                        .HasColumnName("limit");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<string>("record_stat")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.Property<string>("rolecode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rolecode");

                    b.Property<string>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasDefaultValue("O")
                        .HasColumnName("status");

                    b.Property<string>("userid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("userid");

                    b.Property<string>("username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("id")
                        .HasName("pk_tb_user");

                    b.ToTable("tb_user", (string)null);
                });

            modelBuilder.Entity("map.backend.shared.Entities.Map.sttm_district_standard", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime?>("checker_dt_stamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checker_dt_stamp");

                    b.Property<string>("checker_id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("checker_id");

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("district_code")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("district_code");

                    b.Property<string>("district_name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("district_name");

                    b.Property<string>("district_name_value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("district_name_value");

                    b.Property<DateTime?>("maker_dt_stamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("maker_dt_stamp");

                    b.Property<string>("maker_id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("maker_id");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("province_code")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("province_code");

                    b.Property<string>("record_stat")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.HasKey("id")
                        .HasName("pk_sttm_district_standard");

                    b.ToTable("sttm_district_standard", (string)null);
                });

            modelBuilder.Entity("map.backend.shared.Entities.Map.sttm_province_standard", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime?>("checker_dt_stamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checker_dt_stamp");

                    b.Property<string>("checker_id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("checker_id");

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("maker_dt_stamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("maker_dt_stamp");

                    b.Property<string>("maker_id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("maker_id");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("province_code")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("province_code");

                    b.Property<string>("province_name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("province_name");

                    b.Property<string>("province_name_value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("province_name_value");

                    b.Property<string>("record_stat")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.HasKey("id")
                        .HasName("pk_sttm_province_standard");

                    b.ToTable("sttm_province_standard", (string)null);
                });

            modelBuilder.Entity("map.backend.shared.Entities.Map.sttm_ward_standard", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime?>("checker_dt_stamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checker_dt_stamp");

                    b.Property<string>("checker_id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("checker_id");

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("district_code")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("district_code");

                    b.Property<DateTime?>("maker_dt_stamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("maker_dt_stamp");

                    b.Property<string>("maker_id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("maker_id");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("province_code")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("province_code");

                    b.Property<string>("record_stat")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.Property<string>("ward_code")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("ward_code");

                    b.Property<string>("ward_name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ward_name");

                    b.Property<string>("ward_name_value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ward_name_value");

                    b.HasKey("id")
                        .HasName("pk_sttm_ward_standard");

                    b.ToTable("sttm_ward_standard", (string)null);
                });

            modelBuilder.Entity("map.backend.shared.Entities.Map.tb_location_users", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("locationid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("locationid");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("record_stat")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.Property<string>("userid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("userid");

                    b.HasKey("id")
                        .HasName("pk_tb_location_users");

                    b.ToTable("tb_location_users", (string)null);
                });

            modelBuilder.Entity("map.backend.shared.Entities.Map.tb_location_users_history", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("backupdt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("backupdt");

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("histid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("histid");

                    b.Property<string>("locationid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("locationid");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("record_stat")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.Property<string>("userid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("userid");

                    b.HasKey("id")
                        .HasName("pk_tb_location_users_history");

                    b.ToTable("tb_location_users_history", (string)null);
                });

            modelBuilder.Entity("map.backend.shared.Entities.Map.tb_locations", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<string>("address_detail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address_detail");

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("district_code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("district_code");

                    b.Property<Geometry>("location")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("location");

                    b.Property<string>("locationid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("locationid");

                    b.Property<string>("locationinfo")
                        .HasColumnType("text")
                        .HasColumnName("locationinfo");

                    b.Property<string>("locationname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("locationname");

                    b.Property<string>("locationstatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("locationstatus");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("projectid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("projectid");

                    b.Property<string>("province_code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("province_code");

                    b.Property<string>("record_stat")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.Property<string>("treecode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("treecode");

                    b.Property<string>("treeinfor")
                        .HasColumnType("text")
                        .HasColumnName("treeinfor");

                    b.Property<string>("treename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("treename");

                    b.Property<string>("treestatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("treestatus");

                    b.Property<string>("treetype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("treetype");

                    b.Property<string>("ward_code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("ward_code");

                    b.HasKey("id")
                        .HasName("pk_tb_locations");

                    b.ToTable("tb_locations", (string)null);
                });

            modelBuilder.Entity("map.backend.shared.Entities.Map.tb_locations_history", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("address_detail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address_detail");

                    b.Property<DateTime>("backupdt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("backupdt");

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("district_code")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("district_code");

                    b.Property<Geometry>("location")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("location");

                    b.Property<string>("locationid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("locationid");

                    b.Property<string>("locationinfo")
                        .HasColumnType("text")
                        .HasColumnName("locationinfo");

                    b.Property<string>("locationname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("locationname");

                    b.Property<string>("locationstatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("locationstatus");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("projectid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("projectid");

                    b.Property<string>("province_code")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("province_code");

                    b.Property<string>("record_stat")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.Property<string>("treecode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("treecode");

                    b.Property<string>("treeinfor")
                        .HasColumnType("text")
                        .HasColumnName("treeinfor");

                    b.Property<string>("treename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("treename");

                    b.Property<string>("treestatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("treestatus");

                    b.Property<string>("treetype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("treetype");

                    b.Property<string>("ward_code")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("ward_code");

                    b.HasKey("id")
                        .HasName("pk_tb_locations_history");

                    b.ToTable("tb_locations_history", (string)null);
                });

            modelBuilder.Entity("map.backend.shared.Entities.Map.tb_projects", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("contractors")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contractors");

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<DateTime>("enddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("enddate");

                    b.Property<string>("img")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img");

                    b.Property<string>("investor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("investor");

                    b.Property<int?>("mod_no")
                        .HasColumnType("integer")
                        .HasColumnName("mod_no");

                    b.Property<string>("modify_by")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modify_by");

                    b.Property<DateTime?>("modify_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_date");

                    b.Property<DateTime>("opendate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("opendate");

                    b.Property<string>("projectdesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("projectdesc");

                    b.Property<string>("projectdetail")
                        .HasColumnType("text")
                        .HasColumnName("projectdetail");

                    b.Property<string>("projectid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("projectid");

                    b.Property<string>("projectname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("projectname");

                    b.Property<DateTime>("receiptdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("receiptdate");

                    b.Property<string>("record_stat")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("record_stat");

                    b.Property<string>("total_value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("total_value");

                    b.HasKey("id")
                        .HasName("pk_tb_projects");

                    b.ToTable("tb_projects", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
